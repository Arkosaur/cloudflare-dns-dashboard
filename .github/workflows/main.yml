# .github/workflows/main.yml

name: Build and Push Docker Image to GHCR

on:
  push:
    branches:
      - 'master' # 仅在 master 分支推送时触发
      - 'main'   # 也支持 main 分支
    tags:
      - 'v*.*.*' # 在推送版本标签时（如 v1.0.0）触发
  pull_request:
    branches:
      - 'master'
      - 'main'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # 1. 优化点：自动提取元数据（标签和标注）
    # 这个 Action 会根据 Git 事件（如分支、标签）自动生成更智能、更有用的 Docker 标签。
    # - 推送到 master 分支会生成 'latest' 和 'master' 标签
    # - 推送 Git 标签 v1.2.3 会生成 'v1.2.3' 和 'v1' 标签
    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          # Git 标签事件，例如 v1.0.0
          type=semver,pattern={{version}}
          # Git 分支事件
          type=ref,event=branch
          # 为默认分支添加 latest 标签
          type=raw,value=latest,enable={{is_default_branch}}
          # 使用 SHA 作为标签，保证唯一性
          type=sha,prefix=,suffix=,format=short

    # 2. 优化点：登录到 GitHub Container Registry (GHCR)
    # 使用 GITHUB_TOKEN，无需改动，但这是最佳实践。
    - name: Log in to the GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # 3. 优化点：设置 QEMU 以支持多平台构建（可选，但推荐）
    # 如果你的应用需要运行在不同的 CPU 架构上（如 AMD64 和 ARM64），这一步非常有用。
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    # 4. 优化点：设置 Docker Buildx
    # Buildx 是一个 Docker CLI 插件，它扩展了 build 命令，完全支持 BuildKit 构建器工具包。
    # 这是使用缓存和多平台构建的前提。
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # 5. 优化点：构建和推送镜像，并启用缓存
    # - cache-from/cache-to: 极大地提升后续构建速度。
    # - labels: 使用 meta action 自动生成的标注，包含 Git SHA 等溯源信息。
    # - tags: 使用 meta action 自动生成的标签。
    # - platforms: 指定构建的目标平台（架构）。
    - name: Build and push Docker image
      id: build-and-push
      uses: docker/build-push-action@v5
      with:
        context: .
        # 仅在非 pull_request 事件中推送镜像
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        # 启用 BuildKit 缓存，关联到 Git ref 和 job id
        cache-from: type=gha
        cache-to: type=gha,mode=max
        # (可选) 指定构建的平台
        # platforms: linux/amd64,linux/arm64

    # (可选) 6. 新增步骤：运行 Trivy 进行漏洞扫描
    # 在镜像推送到仓库后，对其进行安全扫描，有助于及早发现安全风险。
    - name: Scan image for vulnerabilities
      if: github.event_name != 'pull_request' # 仅在推送后扫描
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'ghcr.io/${{ github.repository }}:${{ steps.meta.outputs.version }}'
        format: 'table'
        exit-code: '0' # 即使发现漏洞也继续，仅作报告
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'
